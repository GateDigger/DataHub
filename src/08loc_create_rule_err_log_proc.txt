DECLARE

    v_tab CHAR := chr(9);
    v_line_break VARCHAR2(2 CHAR) := chr(10);

    v_main_dataowner VARCHAR2(255 CHAR); --Defaults to CURRENT_SCHEMA if left empty
    v_main_tbl VARCHAR2(255 CHAR) := 'TBL_NAME';

    v_rules_dataowner VARCHAR2(255 CHAR); --Defaults to v_main_dataowner if left empty
    v_rules_tbl VARCHAR2(255 CHAR) := 'DH_RULES_TBL_' || v_main_tbl;
    v_rules_exception_dtl_len NUMBER := 255;

    v_err_log_proc_dataowner VARCHAR2(255 CHAR); --Defaults to v_main_dataowner if left empty
    v_err_log_proc_name VARCHAR2(255 CHAR) := 'DH_RULES_ERR_LOG_' || v_main_tbl;

    v_sql_stmt CLOB;

BEGIN

    IF v_main_dataowner IS NULL
    THEN
        SELECT SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') INTO v_main_dataowner FROM dual;
    END IF;

    IF v_rules_dataowner IS NULL
    THEN
        v_rules_dataowner := v_main_dataowner;
    END IF;

    IF v_err_log_proc_dataowner IS NULL
    THEN
        v_err_log_proc_dataowner := v_main_dataowner;
    END IF;

    v_sql_stmt := 'CREATE OR REPLACE PROCEDURE "' || v_err_log_proc_dataowner || '"."' || v_err_log_proc_name || '"(rule_oid IN NUMBER, last_commit_oid IN NUMBER, err_msg IN VARCHAR2) IS' || v_line_break
        || v_line_break
        || 'PRAGMA AUTONOMOUS_TRANSACTION;' || v_line_break
        || v_line_break
        || 'BEGIN' || v_line_break
        || v_line_break
        || v_tab || 'UPDATE "' || v_rules_dataowner || '"."' || v_rules_tbl || '" SET "EXCEPTION_DTL" = substr(err_msg || ''; last_commit_oid = '' || last_commit_oid, 0, ' || v_rules_exception_dtl_len || ') WHERE "OID" = rule_oid;' || v_line_break
        || v_tab || 'COMMIT;' || v_line_break
        || v_line_break
        || 'END;';

    dbms_output.put_line(v_sql_stmt);
    dbms_output.put_line(NULL);
    EXECUTE IMMEDIATE v_sql_stmt;

END;